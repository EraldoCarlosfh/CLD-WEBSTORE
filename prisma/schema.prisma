// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categorys {
  id       String     @id @default(uuid())
  name     String
  slug     String
  imageUrl String
  products Products[]

  @@map("categorys")
}

model Products {
  id                 String             @id @default(uuid())
  name               String
  slug               String
  description        String
  basePrice          Decimal            @db.Decimal(8, 2)
  imageUrls          String[]
  categoryId         String
  category           Categorys          @relation(fields: [categoryId], references: [id])
  discountPercentage Int                @default(0)
  totalPrice         Decimal            @db.Decimal(8, 2)
  wishListProducts   WishListProducts[]
  ordersProducts     OrdersProducts[]

  @@map("products")
}

model Orders {
  id             String           @id @default(uuid())
  userId         String
  users          User             @relation(fields: [userId], references: [id])
  ordersProducts OrdersProducts[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  status         OrderStatus      @default(WAITING_FOR_PAYMENT)

  @@map("orders")
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}

model OrdersProducts {
  id                 String   @id @default(uuid())
  productId          String
  products           Products @relation(fields: [productId], references: [id])
  orderId            String
  orders             Orders   @relation(fields: [orderId], references: [id])
  basePrice          Decimal  @db.Decimal(8, 2)
  discountPercentage Int      @default(0)
  quantity           Int      @default(0)

  @@map("ordersProducts")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?          @map("email_verified")
  image            String?
  accounts         Account[]
  sessions         Session[]
  Orders           Orders[]
  wishListProducts WishListProducts[]

  @@map("users")
}

model WishListProducts {
  id        String   @id @default(uuid())
  name      String
  productId String
  products  Products @relation(fields: [productId], references: [id])
  userId    String
  users     User     @relation(fields: [userId], references: [id])

  @@map("wishListProducts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
